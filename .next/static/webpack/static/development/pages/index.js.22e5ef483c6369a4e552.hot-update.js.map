{"version":3,"file":"static/webpack/static/development/pages/index.js.22e5ef483c6369a4e552.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import QUESTIONS from '../questions';\nimport Layout from '../components/layout';\nimport QuestionsGrid from '../components/questions-grid';\nimport Modal from '../components/modal';\nimport { setQuestionState } from '../helpers';\n\nimport 'isomorphic-fetch';\n\nclass QuestionsBoard extends React.PureComponent {\n    constructor() {\n        super();\n\n        this.state = {\n            isModalOpened: false,\n            questions: [],\n            selectedQuestion: {}\n        };\n\n    }\n\n    static async getInitialProps() {\n        const questionsRes = await fetch('http://localhost:4100/questions');\n        const questions = await questionsRes.json();\n        return { questions };\n    }\n\n    componentWillReceiveProps(nextProps) {\n        console.log('will', nextProps.questions);\n        this.setState({ questions: nextProps.questions });\n    }\n\n    answerQuestion = (isCorrect) => () => {\n        const { questions, selectedQuestion: { id } } = this.state;\n        const updatedQuestions = setQuestionState({\n            questions,\n            id,\n            newData: {\n                isCorrect\n            }\n        });\n        this.setState({\n            isModalOpened: false,\n            questions: updatedQuestions,\n            selectedQuestion: {}\n        }, () => {\n            localStorage.setItem('questions', JSON.stringify(updatedQuestions));\n        });\n    }\n\n    setModalVisibility = (visible, question) => (event) => {\n        event.preventDefault();\n        this.setState({\n            isModalOpened: visible,\n            selectedQuestion: question\n        });\n    }\n\n    setQuestions = (newQuestions) => {\n        this.setState({ questions: newQuestions });\n    }\n\n    render() {\n        const { isModalOpened, questions, selectedQuestion } = this.state;\n        console.log('props', this.props);\n\n        return (\n            <>\n                <Modal\n                    answerQuestion={this.answerQuestion}\n                    question={selectedQuestion}\n                    closeModal={this.setModalVisibility(false, {})}\n                    visible={isModalOpened}\n                />\n                <Layout questions={questions} title=\"Preguntas\">\n                    <QuestionsGrid\n                        questions={questions}\n                        setModalVisibility={this.setModalVisibility}\n                    />\n                </Layout>\n            </>\n        );\n    }\n}\n\nexport default QuestionsBoard;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAsBA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AADA;AAHA;AACA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAhBA;AACA;AAvBA;AAwCA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AANA;AACA;AAzCA;AAiDA;AAAA;AAAA;AACA;AACA;AAhDA;AACA;AACA;AACA;AAHA;AAHA;AASA;AACA;;;AAOA;AACA;AACA;AAAA;AAAA;AACA;;;AAgCA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;;;;;;;;;;AA5DA;AACA;;AADA;;AACA;AACA;;AADA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAhBA;AACA;AA2EA;;;;A","sourceRoot":""}